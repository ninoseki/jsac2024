{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JSAC2024 Mihari Workshop","text":"<p>Acknowledgements</p> <p>Thanks for @snkhan and @sepi140 for their kindly helps.</p> <p>Warning</p> <ul> <li>Do not access to possibly malicious IPs, domains and URLs via the conference network!</li> <li>This document is written on based on Mihari v7.3 and specs subject to change in the future.</li> </ul>"},{"location":"#time-table","title":"Time Table","text":"<ul> <li>00:00-00:30 - Introduction, Setup, Architecture and Rule</li> <li>00:30-00:40 - Ex.1 CT Log Based Subdomain Enumeration</li> <li>00:40-00:50 - Ex.2 MoqHao Landing Pages</li> <li>00:50-01:00 - Break</li> <li>01:00-01:20 - Ex.3 Honeypot</li> <li>01:20-01:30 - Vs. ProjectDiscovery</li> <li>01:30-01:50 - Ex.4 Working With Nuclei</li> <li>Practical Operation With Mihari (If time allows)</li> <li>01:50-02:00 - Wrap-up / Q&amp;A</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>Mihari is a packaged as a Ruby gem and uses the following components:</p> <ul> <li>rails/thor for building the CLI application.</li> <li>ruby-grape/grape, rack/rack and puma/puma for building and running the web application.</li> <li>sidekiq/sidekiq for (optional) background processing.</li> <li>vuejs for building the frontend SPA.</li> </ul>"},{"location":"architecture/#basic","title":"Basic","text":"<pre><code>flowchart LR\n    CLI[\"CLI\\n(Thor)\"] --&gt; Database\n    Web[\"Web\\n(Grape on Rack + Puma)\"] --&gt; Database</code></pre> <p>The lab env uses this one.</p>"},{"location":"architecture/#advanced","title":"Advanced","text":"<pre><code>flowchart LR\n    CLI[\"CLI\\n(Thor)\"] --&gt; Database\n    Web[\"Web\\n(Grape on Rack + Puma)\"] --&gt; Database\n    Web --&gt; Sidekiq[\"Job Queue\\n(Sidekiq)\"]\n    Sidekiq --&gt; Database\n    Sidekiq --&gt; Redis</code></pre> <p>This one is recommended if you want to use the API a lot.</p> <p>Sidekiq handles time-consuming jobs such as searching a rule, etc.</p> <p>Note</p> <p>The web application runs on Rack + Puma. Its default HTTP request timeout is 60s. It means that a search exceeds 60s will fail.</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#problem-statements","title":"Problem Statements","text":"<ul> <li>Pros and cons in the Internet search engines, passive DNS/SSL services:<ul> <li>e.g. I can find CVE-xxx in X but not Y.</li> </ul> </li> <li>Data management. (How do you manage search results?)</li> <li>Searching is boring and human error is inevitable.</li> </ul>"},{"location":"introduction/#mihari-is-to-rescue","title":"Mihari Is to Rescue","text":"<ul> <li>One Sigma-like rule to rule multiple services like the One Ring.</li> </ul> <ul> <li>SQL database based data management.</li> </ul> <ul> <li>Automate all the things!</li> </ul>"},{"location":"introduction/#use-cases","title":"Use Cases","text":"<ul> <li>C2 tracking</li> <li>ASM?</li> <li>Bug Bounty/Pentest?</li> </ul>"},{"location":"introduction/#users-voice","title":"User's Voice","text":"<p>Mihari is single-handedly one of the most helpful and versatile tools a CTI analyst can have in their toolkit and repertoire. It removes the complexity of needing to develop custom tooling, and provides a simple yet coherent mechanism through which to develop a collections programme leveraging services such as Censys, Shodan and VirusTotal. Combined with Shimon, Mihari is the definitive tool for tracking malicious infrastructure.</p> <p>Mihari\u2019s extensible nature, including its API, ensures it remains flexible enough to integrate within existing analysis pipelines. Ultimately, Mihari can help reduce a CTI teams\u2019 reliance on vendor IOC feeds, by allowing teams to rapidly develop and automate their own high-fidelity collections to meet specific organisational intelligence requirements and priorities.</p> <p>Sajid Nawaz Khan, Principal Analyst, FTSE 100 (@snkhan@infosec.exchanges)</p>"},{"location":"introduction/#references","title":"References","text":"<ul> <li>INES by F\u00e9lix Aim\u00e9 (ex-Kaspersky GReAT)<ul> <li>Developed to help run continuous queries on services like Censys/Shodan.</li> </ul> </li> <li>3c7/infrastructure-tracking-schema<ul> <li>The goal is to have a common rule schema that allows querying a variety of services and chaining those queries together.</li> </ul> </li> <li>InQuest/ThreatIngestor<ul> <li>Extract and aggregate threat intelligence.</li> </ul> </li> </ul>"},{"location":"introduction/#alternatives","title":"Alternatives","text":"<ul> <li>projectdiscovery/uncover<ul> <li>Quickly discover exposed hosts on the internet using multiple search engines.</li> </ul> </li> <li>projectdiscovery/nuclei<ul> <li>Fast and customizable vulnerability scanner based on simple YAML based DSL.</li> </ul> </li> </ul>"},{"location":"operation/","title":"Practical Operation With Mihari","text":"<p>Using GitOps methodology is the best practice to use Mihari.</p> <p>Success</p> <ul> <li>Easy to review &amp; revert a change in a rule.</li> <li>Easy to build a workflow.</li> </ul> <p>You can use any CI/CD solution (CircleCI, GitHub Actions, etc.) with Mihari.</p>"},{"location":"operation/#github-actions","title":"GitHub Actions","text":"<p>You need to have the following files:</p> <ul> <li>Gemfile</li> <li>Gemfile.lock</li> <li>.github/workflows/mihari.yml</li> <li>... and rules!</li> </ul> <p><code>Gemfile</code> and <code>Gemfile.lock</code> for caching gem dependencies. <code>.github/workflows/mihari.yml</code> is a workflow to run Mihari.</p>"},{"location":"rule/","title":"Rule","text":""},{"location":"rule/#a-trinity","title":"A Trinity","text":"<p>A rule is composed by three main components. Analyzers (queries), enrichers and emitters.</p> <ul> <li>Analyzers (Queries): a list of queries (analyzers) that builds a list of artifacts.</li> <li>Enrichers: a list of enrichers that enriches a list of artifacts.</li> <li>Emitters: a list of emitters that emits a list of artifacts as an alert.</li> </ul> <pre><code>graph LR\n  Analyzers[\"Analyzers (Queries)\"] --&gt; |Artifacts| Enrichers[Enrichers]\n  Enrichers --&gt; |\"(Enriched) Artifacts\"| Emitters[Emitters]\n  Emitters --&gt; |Alert| Database[(Database)]</code></pre>"},{"location":"rule/#data-modeling","title":"Data Modeling","text":"<ul> <li>A rule has zero or more alerts.</li> <li>A alert has one or more artifacts.</li> </ul> <pre><code>erDiagram\n    Rule ||--o{ Alert : \"has zero-or-more\"\n    Alert ||--|{ Artifact : \"has one-or-more\"</code></pre> <p>An artifact can have following data types:</p> <ul> <li>IP address (<code>ip</code>)</li> <li>Domain (<code>domain</code>)</li> <li>URL (<code>url</code>)</li> <li>Mail (<code>mail</code>)</li> <li>Hash (<code>hash</code>)</li> </ul> <p>An artifact can also have the following components:</p> <pre><code>erDiagram\n    Artifact ||--o{ \"Autonomous System\": \"has zero-or-one\"\n    Artifact ||--o{ Geolocation: \"has zero-or-one\"\n    Artifact ||--o{ \"Whois Record\" : \"has zero-or-one\"\n    Artifact ||--o{ Port: \"has zero-or-more\"\n    Artifact ||--o{ CPE: \"has zero-or-more\"\n    Artifact ||--o{ \"Reverse DNS Name\": \"has zero-or-more\"\n    Artifact ||--o{ \"DNS Record\": \"has zero-or-more\"</code></pre>"},{"location":"rule/#continue-continue-and-continue","title":"Continue, Continue and Continue","text":"<p>A rule is assumed to be continuously searched. An alert generated by a rule will only have new findings.</p> <p>Tip</p> <p>You can control how Mihari checks the freshness via artiact_ttl.</p>"},{"location":"rule/#rule-anatomy","title":"Rule Anatomy","text":"<pre><code>id: c7f6968e-dbe1-4612-b0bb-8407a4fe05df\ntitle: Example\ndescription: Mihari rule example\ncreated_on: 2023-01-01\nupdated_on: 2023-01-02\nauthor: ninoseki\nreferences:\n  - https://github.com/ninoseki/mihari\nrelated: []\ntags:\n  - foo\n  - bar\nqueries:\n  - analyzer: crtsh\n    query: example.com\nenrichers:\n  - enricher: whois\n  - enricher: mmdb\n  - enricher: shodan\n  - enricher: google_public_dns\nemitters:\n  - emitter: database\n  - emitter: misp\n  - emitter: slack\n  - emitter: thehive\ndata_types:\n  - hash\n  - ip\n  - domain\n  - url\n  - mail\nfalsepositives: []\nartifact_ttl: null\n</code></pre>"},{"location":"rule/#id","title":"ID","text":"<p><code>id</code> (<code>string</code>) is an unique ID of a rule. UUID v4 is recommended.</p>"},{"location":"rule/#title","title":"Title","text":"<p><code>title</code> (<code>string</code>) is a title of a rule.</p>"},{"location":"rule/#description","title":"Description","text":"<p><code>description</code> (<code>string</code>) is a short description of a rule.</p>"},{"location":"rule/#createdupdated-on","title":"Created/Updated On","text":"<p><code>created_on</code> (<code>date</code>) is a date of a rule creation. Optional. Also a rule can have <code>updated_on</code> that is a date of a rule modification. Optional.</p>"},{"location":"rule/#tags","title":"Tags","text":"<p><code>tags</code> (<code>array[:string]</code>) is a list of tags of a rule. Optional. Defaults to <code>[]</code>.</p>"},{"location":"rule/#author","title":"Author","text":"<p><code>author</code> (<code>string</code>) is an author of a rule. Optional.</p>"},{"location":"rule/#references","title":"References","text":"<p><code>references</code> (<code>array[:string]</code>) is a list of a references of a rule. Optional.</p>"},{"location":"rule/#related","title":"Related","text":"<p><code>related</code> (<code>array[:string]</code>) is a list of related rule IDs. Optional.</p>"},{"location":"rule/#queries","title":"Queries","text":"<p><code>queries</code> is a list of queries/analyzers.</p> <p>Tip</p> <p>See Aanalyzer for details.</p>"},{"location":"rule/#enrichers","title":"Enrichers","text":"<p><code>enrichers</code> is a list of enrichers.</p> <p>Tip</p> <p>See Enrichers for details.</p> <p>Defaults to:</p> <ul> <li><code>google_public_dns</code></li> <li><code>mmdb</code></li> <li><code>shodan</code></li> <li><code>whois</code></li> </ul>"},{"location":"rule/#emitters","title":"Emitters","text":"<p><code>emitters</code> is a list of emitters.</p> <p>Tip</p> <p>See Emitters for details.</p> <p>Defaults to:</p> <ul> <li><code>database</code></li> </ul>"},{"location":"rule/#data-types","title":"Data Types","text":"<p><code>data_types</code> (<code>array[:string]</code>) is a list of data (artifact) types to allow by a rule. Types not defined in here will be automatically rejected.</p> <p>Defaults to:</p> <ul> <li><code>ip</code></li> <li><code>domain</code></li> <li><code>url</code></li> <li><code>mail</code></li> <li><code>hash</code></li> </ul>"},{"location":"rule/#false-positives","title":"False positives","text":"<p><code>falsepositives</code> (<code>array[:string]</code>) is a list of false positive values. Optional. A string or regexp can be used in here.</p> <p>For example,</p> <pre><code>falsepositives:\n  - 127.0.0.1\n  - /^example\\.(com|net)$/\n</code></pre> <p>rejects:</p> <ul> <li><code>127.0.0.1</code></li> <li><code>example.com</code></li> <li><code>example.net</code></li> </ul>"},{"location":"rule/#artifact-ttl","title":"Artifact TTL","text":"<p><code>artifact_ttl</code> (<code>integer</code>) is an integer value of artifact TTL (Time-To-Live) in seconds. Optional.</p> <p>Mihari rejects a duplicated artifact in a rule by default.</p> <p>But you may want to get a same artifact after a certain period of time. <code>artifact_ttl</code> is for that. If a rule finds a same artifact after <code>artifact_ttl</code> seconds have been passed, that artifact will be included in an alert.</p>"},{"location":"rule/#how-to-search-by-a-rule","title":"How to Search by a Rule","text":"<pre><code>mihari search /path/to/rule.yml\n</code></pre> <p>The command outputs an alert to the standard output. Also you can confirm it via the CLI command or the built-in web app.</p> <pre><code>mihari alert list\n# or\nmihari web\n</code></pre>"},{"location":"setup/","title":"Lab Env Setup","text":""},{"location":"setup/#requirements","title":"Requirements","text":"<ul> <li>Docker (Docker Desktop 2.0+ is recommended)</li> <li>VS Code + Remote Development extension pack</li> </ul>"},{"location":"setup/#setup","title":"Setup","text":"<pre><code>git clone https://github.com/ninoseki/jsac_mihari_workshop\ncode jsac_mihari_workshop\n</code></pre> <p>Info</p> <p>Follow this instruction if you are unable to use <code>code</code> command.</p> <p>Use the <code>Dev Containers: Reopen in Container</code> command from the Command Palette (F1, \u21e7\u2318P) to start the container. It will take several minutes to complete.</p> <p>If everything goes well, you can use Mihari, Nuclei and jq in the container.</p> <pre><code>$ mihari -v\n7.3.1\n\n$ nuclei --version\n[INF] Nuclei Engine Version: v3.1.5\n[INF] Nuclei Config Directory: /home/vscode/.config/nuclei\n[INF] Nuclei Cache Directory: /home/vscode/.cache/nuclei\n\n$ jq --version\njq-1.6\n</code></pre>"},{"location":"vs_project_discovery/","title":"Vs. ProjectDiscovery or How I Learned to Stop Worrying and Love It","text":""},{"location":"vs_project_discovery/#what-are-uncover-and-nuclei","title":"What Are Uncover and Nuclei?","text":"<ul> <li>projectdiscovery/uncover<ul> <li>Quickly discover exposed hosts on the internet using multiple search engines.</li> </ul> </li> <li>projectdiscovery/nuclei<ul> <li>Fast and customizable vulnerability scanner based on simple YAML based DSL.</li> </ul> </li> </ul>"},{"location":"vs_project_discovery/#a-key-difference","title":"A Key Difference","text":"<ul> <li>Mihari is a passive monitoring tool.</li> <li>ProjectDiscovery's Nuclei is an active monitoring/scanning tool.</li> </ul> <p>Nuclei can validate/filter findings by scanning and Mihari cannot.</p>"},{"location":"vs_project_discovery/#misc-differences","title":"Misc Differences","text":"<ul> <li>A number of services supports:<ul> <li>Mihari supports 15+ services.</li> <li>Uncover supports 10 services.</li> </ul> </li> <li>Data persistence:<ul> <li>Mihari does support data persistence in SQL database.</li> <li>Nuclei does support data persistence in LevelDB.<ul> <li>Also can create a report in Elasticsearch, Splunk, ProjectDiscovery's Cloud Platform, etc.</li> </ul> </li> </ul> </li> <li>Data enrichment:<ul> <li>Mihari does have automated data enrichment feature.</li> <li>Nuclei &amp; Uncover don't have automated data enrichment feature.</li> </ul> </li> </ul>"},{"location":"vs_project_discovery/#so-so-what","title":"So, So What?","text":"<p>I don't know. :D</p> <p>It depends on what you are trying to do. ProjectDiscovery may be more the right toolset for you.</p>"},{"location":"vs_project_discovery/#a-good-pairing","title":"A Good Pairing?","text":"<p>Anyway you can combine both. Collecting data in Mihari and validating it with Nuclei.</p> <p>It's beneficial to save API quota because Nuclei uses API every time when Uncover options are set.</p> <pre><code># Shodan API key is used more than twice\nnuclei -uq \"ip:1.1.1.1\" -ue shodan ...\nnuclei -uq \"ip:1.1.1.1\" -ue shodan ...\n</code></pre> <p>You can convert Mihari data to Nuclei's targets by using list-transform feature.</p>"},{"location":"exercises/honeypot/","title":"Finding Honeypots","text":"<p>Learning Points</p> <ul> <li>How to write a rule. (Reprise)</li> </ul>"},{"location":"exercises/honeypot/#problem-statement","title":"Problem Statement","text":"<p>I run two HASH based honeypots on the Internet.</p> <p>Warning</p> <p>I will tear down the honeypots after the conference. I don't assure their existence after 2024/01/26.</p> <p>Try to create a Mihari rule to find them.</p>"},{"location":"exercises/honeypot/#notes","title":"Notes","text":"<ul> <li>HASH's profile configuration is described at https://github.com/DataDog/HASH/blob/main/docs/config.md.</li> <li>The honeypot profile is defined in https://github.com/ninoseki/jsac_mihari_workshop/tree/main/honeypot.</li> <li>Alternatively you can run the honeypot in your laptop by:</li> </ul> <pre><code># Node.js v20+ is required\ngit clone https://github.com/ninoseki/jsac_mihari_workshop\ncd jsac_mihari_workshop\nnpm install\nnpx hash-honeypot run honeypot\n</code></pre> <p>Tip</p> <ul> <li>There is a very unique header key-value pair.</li> <li>Favicon is very unique too.</li> </ul>"},{"location":"exercises/moqhao/","title":"MoqHao Landing Pages","text":"<p>Learning Points</p> <ul> <li>How to write a rule. (Reprise)</li> <li>How to configure Mihari.</li> </ul>"},{"location":"exercises/moqhao/#problem-statement","title":"Problem Statement","text":"<p>Run a rule I provide and try to improve it.</p> <p>Warning</p> <ul> <li>Again, do not access to IPs hit!</li> </ul> <ul> <li>Use passive data for pivoting.</li> </ul>"},{"location":"exercises/moqhao/#notes","title":"Notes","text":"<p>Tip</p> <ul> <li>See Configuration to know how to set credentials.</li> <li>The provided rule relies on Shodan and Censys but you can translate queries into other services such as BinaryEdge, Fofa, Onyphe, etc.</li> </ul> <p>Warning</p> <p>Please delete alert(s) created through this exercise for a reason.</p>"},{"location":"exercises/moqhao/#references","title":"References","text":"<ul> <li>https://malpedia.caad.fkie.fraunhofer.de/details/apk.moqhao</li> </ul>"},{"location":"exercises/nuclei/","title":"Working Along With Nuclei","text":"<p>Learning Points</p> <ul> <li>How to use <code>list-transform</code> feature.</li> <li>How to use Nuclei along with Mihari.</li> </ul>"},{"location":"exercises/nuclei/#problem-statement","title":"Problem Statement","text":"<p>Try to create a Nuclei template that meets all of the following conditions:</p> <ul> <li>HTTP status equals to 200.</li> <li>Headers have <code>x-conference:JSAC2024</code>.</li> <li>HTML body has an ISO 8601 format datetime.</li> </ul> <p></p>"},{"location":"exercises/nuclei/#notes","title":"Notes","text":""},{"location":"exercises/nuclei/#list-transform-basics","title":"<code>list-transform</code> Basics","text":"<p><code>list-transform</code> command is for listing/searching data with transformation. More specifically, you can transform data with Jbuilder.</p> <p>For example, the following command outputs artifacts data as a top-level array.</p> <pre><code>mihari artifact list-transform -t \"json.array! results.map(&amp;:data)\"\n</code></pre> <p>More practically, the following Jbuilder template combines an IP and its associated ports.</p> <p>ip_port.json.jbuilder</p> <pre><code>ip_ports = results.map do |artifact|\n  artifact.ports.map do |port|\n    \"#{artifact.data}:#{port.number}\"\n  end\nend.flatten\n\njson.array! ip_ports\n</code></pre> <pre><code>mihari artifact list-transform -t /path/to/ip_port.json.jbuilder\n</code></pre> <p>The output can be used for passing data into Nuclei.</p> <p>Warning</p> <p>With great power comes great responsibility.</p> <p>Jbuilder can execute anything with the same privilege Mihari has. Do not use untrusted template.</p>"},{"location":"exercises/nuclei/#nuclei-basics","title":"Nuclei Basics","text":"<ul> <li>Nuclei template is explained at https://docs.projectdiscovery.io/templates/introduction.</li> </ul> <p>Example</p> <p>For example, let's scan the Hello World Rack application.</p> <pre><code># Start Rack application\nrackup config.ru\n</code></pre> <pre><code># Open another terminal\necho \"localhost:9292\" | nuclei -t nuclei/hello_world.yaml\n</code></pre>"},{"location":"exercises/nuclei/#list-transform-nuclei","title":"<code>list-transform</code> + Nuclei","text":"<p>The following command passes <code>ip:port</code> formatted data (targets) to Nuclei.</p> <pre><code># Confirm before scanning\n$ mihari artifact list-transform \"rule.id:{HONEYPOT_RULE_ID}\" -t ip_port.json.jbuilder | jq -r \".[]\"\n# Scan if the output looks good\n$ mihari artifact list-transform \"rule.id:{HONEYPOT_RULE_ID}\" -t ip_port.json.jbuilder | | jq -r \".[]\" |  nuclei -t /path/to/template\n</code></pre> <p>Note</p> <p>Please use a rule I give in Slack if you are unable to complete the previous exercise.</p>"},{"location":"exercises/subdomain_enumeration/","title":"CT Based Subdomain Enumeration","text":"<p>Learning Points</p> <ul> <li>How to write a rule.</li> <li>How to search.</li> <li>How to check findings via CLI &amp; build-in web app.</li> </ul> <p>Initialize a new rule by:</p> <pre><code>mihari rule init ex1.yml\n</code></pre> <p>Modify <code>queries</code>, <code>enrichers</code> and <code>emitters</code> as the following:</p> <pre><code>queries:\n  - analyzer: crtsh\n    query: jpcert.or.jp\n    exclude_expired: true\n    match: ILIKE\nemitters:\n  - emitter: database\nenrichers:\n  - enricher: google_public_dns\n  - enricher: whois\ndata_types:\n  - domain\n</code></pre> <p>Now you are ready to search.</p> <pre><code>mihari search ex1.yml\n</code></pre> <p>Tip</p> <p>Please do <code>mihari db migrate</code> if you get an error like <code>Could not find table 'rules'</code>.</p> <p>Mihari provides two ways to review a search result.</p> <p>CLI</p> <pre><code>mihari alert list\n</code></pre> <p>Web app</p> <pre><code>mihari web\n</code></pre>"},{"location":"exercises/subdomain_enumeration/#how-listingsearching-works","title":"How Listing/Searching Works","text":"<p>Tip</p> <p>Search query supports <code>AND</code>, <code>OR</code>, <code>:</code>, <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>NOT</code> and <code>()</code>.</p> <p>Searchable fields are:</p> Target Searchable fields <code>alert</code> <code>id</code>, <code>tag</code>, <code>created_at</code>, <code>rule.id</code>, <code>rule.title</code>, <code>rule.description</code>, <code>artifact.data</code>, <code>artifact.data_type</code>, <code>artifact.source</code> and <code>artifact.query</code> <code>artifact</code> <code>id</code>, <code>data</code>, <code>data_type</code>, <code>source</code>, <code>query</code>, <code>tag</code>, <code>rule.id</code>, <code>rule.title</code>, <code>rule.description</code>, <code>tag</code>,<code>created_at</code>, <code>asn</code>, <code>country_code</code>, <code>dns_record.value</code>, <code>dns_record.resource</code>, <code>reverse_dns_name</code>, <code>cpe</code> and <code>port</code> <code>rule</code> <code>id</code>, <code>title</code>, <code>description</code>, <code>tag</code>, <code>created_at</code> and <code>updated_at</code> <code>tag</code> <code>id</code> and <code>name</code> <p>Tip</p> <p>See Diagrams to know detailed Active Record &amp; ER diagrams.</p>"}]}